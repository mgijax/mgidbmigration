Server: MGD
Database: mgd
Sat Nov 20 18:23:46 EST 1999

1> 
2> /* R. Palazola */
3> /* 7/12/1999   */
4> /* SQL commands to handle the migration for EST consolidation.  */
5> 
6> /* sqsh -S MGD_DEV -L MGD=mgi_release -L blockSize=10000 -e \   */
7> /*      -a 2 -i migrateEST.sql |& tee logfile                      */
8> 
9> /****************************************************************************/
10> /*                                                                          */
11> /* run any pre-migration report select statments prior to this script!      */
12> /*                                                                          */
13> /****************************************************************************/
14> 
15> use mgd
16> /*
17> set noexec on
18> set parseonly on
19> */
1> 
2> select started=getdate() 
3> into tempdb..startMigration
(1 row affected)
1> select "Database=mgd", "Server=" + @@servername, started 
2> from tempdb..startMigration
                                                    started            
 ------------ ------------------------------------- -------------------
 Database=mgd Server=                               Nov 20 1999  6:23PM

(1 row affected)
1> 
2> print ""
3> print "Remove all Putative relationships"
4> delete from PRB_Marker where relationship = 'P'
 
Remove all Putative relationships
(169401 rows affected)
1> 
2> 
3> print ""
4> print "Change 'free-standing' ESTs to cDNAs"
 
Change 'free-standing' ESTs to cDNAs
1> update PRB_Probe
2> set DNAType = "cDNA"
3> where DNAType = "EST"
4> and derivedFrom is NULL
(540 rows affected)
1> 
2> print ""
3> print "Remove all dbEST IDs for WashU ESTs:"
 
Remove all dbEST IDs for WashU ESTs:
1> 
2> select "accum. time"=
3>        datediff ( ss, started, getdate() )
4>        from tempdb..startMigration
 accum. time
 -----------
         143

(1 row affected)
1> 
2> select _Accession_key
3> into #acckeys
4> from ACC_Accession a, PRB_Probe p
5> where _MGIType_key = 3
6> and _LogicalDB_key = 14  /* dbEST */
7> and a._Object_key = p._Probe_key
8> and p.DNAType = 'EST'
9> and p.name in ( 'WashU/HHMI Mouse EST', 'Withdrawn EST' )
(161526 rows affected)
1> 
2> declare acckey cursor
3> for select _Accession_key from #acckeys
4> for read only
1> 
2> open acckey
1> 
2> set nocount on
1> 
2> declare @key int, @cnt int, @total int, @cursorCnt int
3> select @cnt = 0, @total = 0
4> fetch acckey into @key
5> while ( @@sqlstatus = 0 )
6> BEGIN
7>     begin transaction
8>     delete from ACC_Accession where _Accession_key = @key
9>     if ( @@error = 0 )
10>       BEGIN
11>         commit transaction
12>         select @cnt = @cnt + 1
13>       END
14>     else
15>       BEGIN
16>         print "Delete dbEST Accession IDs failed at key %1!", @key
17>         rollback transaction
18>         return
19>       END
20> 
21>     fetch acckey into @key
22>     if ( @cnt = 50000 or @@sqlstatus > 0)
23>       BEGIN
24>         select @total = @total + @cnt
25>         print "%1! dbEST accession IDs deleted (total %2!).", @cnt, @total
26>         select @cnt = 0
27>         dump transaction mgd with no_log
28>       END
29> END
30> if @@sqlstatus = 1
31>     print "Cursor Failed"
32> print "TOTAL: %1! dbEST accession IDs deleted.", @total
50000 dbEST accession IDs deleted (total 50000).
50000 dbEST accession IDs deleted (total 100000).
50000 dbEST accession IDs deleted (total 150000).
11526 dbEST accession IDs deleted (total 161526).
TOTAL: 161526 dbEST accession IDs deleted.
1> 
2> select "accum. time"=
3>        datediff ( ss, started, getdate() )
4>        from tempdb..startMigration
 accum. time
 -----------
        1682
1> 
2> close acckey
1> deallocate cursor acckey
1> 
2> drop table #acckeys
3> dump transaction mgd with no_log
4> set nocount off
1> 
2> print ""
3> print "Get list of  WashU ESTs with multiple GenBank SIDs..."
4> select _Probe_key, derivedFrom, gbIDs=count(*),
5>        washUsid=min(_Accession_key)
6> into #extraSIDs
7> from PRB_Probe p, ACC_Accession a
8> where p._Probe_key = a._Object_key
9> and _LogicalDB_key = 9
10> and _MGIType_key = 3
11> and p.name = "WashU/HHMI mouse EST"
12> and p.DNAType = "EST"
13> group by derivedFrom, _Probe_key
14> having count(*) > 1
 
Get list of  WashU ESTs with multiple GenBank SIDs...
(4 rows affected)
1> 
2> if 0 = (select count(*) from #extraSIDs)
3> BEGIN
4>   print "Failed to find expected Ed-added GenBank SIDs"
5> END
(0 rows affected)
1> 
2> /* report which ones are not being locked */
3> print "Following ESTs' GenBank IDs appear to be added by curation:"
4> select "EST MGI ID"=a.accID, "GenBank ID"=g.accID
5> from #extraSIDs e, ACC_Accession a, ACC_Accession g
6> where e._Probe_key = a._Object_key
7> and a._MGIType_key = 3
8> and a.prefixPart = "MGI:"
9> and a.preferred = 1
10> and e._Probe_key = g._Object_key
11> and g._MGITYpe_key = 3
12> and g._LogicalDB_key = 9
13> and g._Accession_key != e.washUsid
14> order by derivedFrom, a.accID, g.accID
Following ESTs' GenBank IDs appear to be added by curation:
 EST MGI ID                     GenBank ID                    
 ------------------------------ ------------------------------
 MGI:759655                     AF012811                      
 MGI:760606                     AF065395                      
 MGI:775423                     AF047827                      
 MGI:1146834                    AF088902                      

(4 rows affected)
1> 
2> /* save these temp tables for acc-ref processing at end */
3> 
4> 
5> print ""
6> print "EST References"
 
EST References
1> select p._Probe_key, p.derivedFrom, r._Refs_key, r.hasSequence
2> into #estRef
3> from PRB_Probe p, PRB_Reference r
4> where p._Probe_key = r._Probe_key
5> and p.DNAType = "EST"
(783 rows affected)
1> 
2> 
3> print ""
4> print "Set clones' hasSequence bit where the ESTs' value is 'true'"
 
Set clones' hasSequence bit where the ESTs' value is 'true'
1> update PRB_Reference
2> set hasSequence = 1
3> from PRB_Reference cR, #estRef e
4> where e.derivedFrom = cR._Probe_key
5>       and e._Refs_key = cR._Refs_key
6>       and e.hasSequence = 1 
7>       and cR.hasSequence = 0
(6 rows affected)
1> 
2> print ""
3> print "Remove matching existing clone references"
 
Remove matching existing clone references
1> 
2> delete #estRef
3> from #estRef e, PRB_Reference r
4> where e._Refs_key = r._Refs_key
5> and e.derivedFrom = r._Probe_key
(687 rows affected)
1> 
2> print ""
3> print "Reassociate remaining EST references w/ the clone record"
 
Reassociate remaining EST references w/ the clone record
1> update PRB_Reference 
2> set _Probe_key = e.derivedFrom
3> from #estRef e, PRB_Reference r
4> where e._Refs_key = r._Refs_key
5> and e._Probe_key = r._Probe_key
(96 rows affected)
1> 
2> drop table #estRef
1> 
2> dump transaction mgd with no_log
1> 
2> print ""
3> /* print "Remove all remaining EST Reference records" */
4> print "EST deletion will remove remaining EST Reference records"
 
EST deletion will remove remaining EST Reference records
1> 
2> /*
3> delete PRB_Reference 
4> from PRB_Reference pr, PRB_Probe p
5> where p._Probe_key = pr._Probe_key
6> and p.DNAType = "EST"
7> */
1> 
2> dump transaction mgd with no_log
1> 
2> print ""
3> print "Get list of withdrawn ESTs"
 
Get list of withdrawn ESTs
1> select est_key = _Probe_key, clone_key = derivedFrom
2> into #wdEST
3> from PRB_Probe
4> where DNAType = "EST"
5> and name = "Withdrawn EST"
(4281 rows affected)
1> 
2> print ""
3> print "Delete the withdrawn ESTs"
 
Delete the withdrawn ESTs
1> delete PRB_Probe
2> from PRB_Probe p, #wdEST wd 
3> where wd.est_key = p._Probe_key 
(4281 rows affected)
1> 
2> dump transaction mgd with no_log
1> 
2> 
3> print ""
4> print "Are any of those clones associated with other probes?"
 
Are any of those clones associated with other probes?
1> if exists (select 1 from #wdEST wd, PRB_Probe p
2> where p.derivedFrom = wd.clone_key )
3>   BEGIN
4>     select "Withdrawn Clone" = accID
5>     from ACC_Accession a, #wdEST wd, PRB_Probe p
6>     where a._Object_key = wd.clone_key
7>     and a._MGIType_key = 3 and a._LogicalDB_key = 1
8>     and p.derivedFrom = wd.clone_key
9> 
10>     delete #wdEST
11>     from ACC_Accession a, #wdEST wd, PRB_Probe p
12>     where a._Object_key = wd.clone_key
13>     and a._MGIType_key = 3 and a._LogicalDB_key = 1
14>     and p.derivedFrom = wd.clone_key
15>   END
16> else
17>     select "None"
     
 ----
 None

(1 row affected)
1> 
2> print ""
3> print "Protect any withdrawn clones that have references attached"
 
Protect any withdrawn clones that have references attached
1> delete #wdEST
2> from #wdEST w
3> where exists ( select 1 
4> from PRB_Reference r 
5> where w.clone_key = r._Probe_key
6> )
(3 rows affected)
1> 
2> print ""
3> print "Delete the remaining 'orphaned' withdrawn clones"
 
Delete the remaining 'orphaned' withdrawn clones
1> delete PRB_Probe
2> from PRB_Probe p, #wdEST wd
3> where p._Probe_key = wd.clone_key
(4211 rows affected)
1> 
2> dump transaction mgd with no_log
1> 
2> 
3> drop table #wdEST
1> 
2> print ""
3> print "Reassign EST Acc IDs to the parental clone:"
 
Reassign EST Acc IDs to the parental clone:
1> 
2> select "accum. time"=
3>        datediff ( ss, started, getdate() )
4>        from tempdb..startMigration
 accum. time
 -----------
        1791

(1 row affected)
1> 
2> /* only the WashU ESTs should be left */
3> print "Reassign MGI:#s..."
Reassign MGI:#s...
1> 
2> select _Accession_key, p.derivedFrom, preferred, accID
3> into #mgiAccs
4> from ACC_Accession a, PRB_Probe p
5> where prefixPart = "MGI:"
6> and _MGIType_key = 3 
7> and _LogicalDB_key = 1
8> /* get em all: and preferred = 1 */
9> and _Object_key = _Probe_key
10> and p.DNAType = "EST"
(364137 rows affected)
1> 
2> /* report any non-preferred that will appear to mess up the count */
3> 
4> create unique index mgiAccIndex on #mgiAccs ( _Accession_key )
5> print  "Non-preferred MGI:#'s for ESTs"
6> select accID 
7> from #mgiAccs where preferred = 0
Non-preferred MGI:#'s for ESTs
 accID                         
 ------------------------------
 MGI:1334614                   

(1 row affected)
1> 
2> set nocount on
3> 
4> declare @minKey int, @maxKey int, @blockKey int, @total int,
5> @err int, @cnt int
6> select @minKey = min(_Accession_key),
7>        @maxKey = max(_Accession_key),
8> 	   @total = 0
9> from #mgiAccs
10> while @minKey <= @maxKey
11>   BEGIN
12>     select @blockKey = @minKey + 50000 - 1
13>     print  "Current block: %1! %2!", @minKey, @blockKey
14>     begin transaction
15> 	update ACC_Accession 
16> 	set _Object_key = derivedFrom, preferred = 0
17> 	from ACC_Accession a, #mgiAccs m
18> 	where a._Accession_key = m._Accession_key
19>     and m._Accession_key between @minKey and @blockKey
20> 
21> 	select @err=@@error, @cnt = @@rowcount
22> 	print "%1! rows affected", @cnt
23>     if ( @err != 0 )
24>       BEGIN
25>         rollback transaction
26>         return
27>       END
28>     else
29> 	  BEGIN
30> 	    select @total = @total + @cnt
31>         commit transaction
32> 	  END
33> 
34>     select @minKey = @blockKey + 1
35>     dump transaction mgd with no_log
36>   END
37> print "TOTAL: %1! MGI Accession IDs reassigned to clone", @total
Current block: 269301 319300
5007 rows affected
Current block: 319301 369300
6287 rows affected
Current block: 369301 419300
7143 rows affected
Current block: 419301 469300
5914 rows affected
Current block: 469301 519300
7111 rows affected
Current block: 519301 569300
7143 rows affected
Current block: 569301 619300
7143 rows affected
Current block: 619301 669300
7143 rows affected
Current block: 669301 719300
7143 rows affected
Current block: 719301 769300
7143 rows affected
Current block: 769301 819300
7143 rows affected
Current block: 819301 869300
7142 rows affected
Current block: 869301 919300
7219 rows affected
Current block: 919301 969300
7349 rows affected
Current block: 969301 1019300
7142 rows affected
Current block: 1019301 1069300
7143 rows affected
Current block: 1069301 1119300
7143 rows affected
Current block: 1119301 1169300
7166 rows affected
Current block: 1169301 1219300
7234 rows affected
Current block: 1219301 1269300
7461 rows affected
Current block: 1269301 1319300
8081 rows affected
Current block: 1319301 1369300
8334 rows affected
Current block: 1369301 1419300
5792 rows affected
Current block: 1419301 1469300
8425 rows affected
Current block: 1469301 1519300
10000 rows affected
Current block: 1519301 1569300
10000 rows affected
Current block: 1569301 1619300
10030 rows affected
Current block: 1619301 1669300
10000 rows affected
Current block: 1669301 1719300
10000 rows affected
Current block: 1719301 1769300
10000 rows affected
Current block: 1769301 1819300
9999 rows affected
Current block: 1819301 1869300
10000 rows affected
Current block: 1869301 1919300
5634 rows affected
Current block: 1919301 1969300
10000 rows affected
Current block: 1969301 2019300
10000 rows affected
Current block: 2019301 2069300
10299 rows affected
Current block: 2069301 2119300
10000 rows affected
Current block: 2119301 2169300
10355 rows affected
Current block: 2169301 2219300
9820 rows affected
Current block: 2219301 2269300
596 rows affected
Current block: 2269301 2319300
0 rows affected
Current block: 2319301 2369300
0 rows affected
Current block: 2369301 2419300
4372 rows affected
Current block: 2419301 2469300
10591 rows affected
Current block: 2469301 2519300
9784 rows affected
Current block: 2519301 2569300
9775 rows affected
Current block: 2569301 2619300
11480 rows affected
Current block: 2619301 2669300
1451 rows affected
TOTAL: 364137 MGI Accession IDs reassigned to clone
1> 
2> select "accum. time"=
3>        datediff ( ss, started, getdate() )
4>        from tempdb..startMigration
5> set nocount off
 accum. time
 -----------
        3255
1> 
2> 
3> drop table #mgiAccs
1> 
2> print "Reassign foreign accession IDs to clones..."
Reassign foreign accession IDs to clones...
1> 
2> select _Accession_key, p.derivedFrom, a._LogicalDB_key
3> into #fAccs
4> from ACC_Accession a, PRB_Probe p
5> where _MGIType_key = 3 
6> and _LogicalDB_key > 1
7> and _Object_key = _Probe_key
8> and p.DNAType = "EST"
(728276 rows affected)
1> 
2> create unique index fAccIndex on #fAccs (_Accession_key)
1> 
2> select _LogicalDB_key, count(*)
3> from #fAccs
4> group by _LogicalDB_key
5> 
6> set nocount on
 _LogicalDB_key            
 -------------- -----------
              9      364140
             16      364136

(2 rows affected)
1> 
2> declare @minKey int, @maxKey int, @blockKey int, @total int,
3> @err int, @cnt int
4> select @minKey = min(_Accession_key),
5>        @maxKey = max(_Accession_key),
6> 	   @total = 0
7> from #fAccs
8> while @minKey <= @maxKey
9>   BEGIN
10>     select @blockKey = @minKey + 50000 - 1
11>     print  "Current block: %1! %2!", @minKey, @blockKey
12>     begin transaction
13> 	update ACC_Accession 
14> 	set _Object_key = derivedFrom
15> 	from ACC_Accession a, #fAccs f
16> 	where a._Accession_key = f._Accession_key
17>     and f._Accession_key between @minKey and @blockKey
18> 
19> 	select @err=@@error, @cnt=@@rowcount
20> 	print "%1! rows affected", @cnt
21>     if ( @err != 0 )
22>       BEGIN
23>         rollback transaction
24>         return
25>       END
26>     else
27> 	  BEGIN
28> 	    select @total = @total + @cnt
29>         commit transaction
30> 	  END
31> 
32>     select @minKey = @blockKey + 1
33>     dump transaction mgd with no_log
34>   END
35> print "TOTAL: %1! foreign Accession IDs reassigned to clone", @total
Current block: 269302 319301
10014 rows affected
Current block: 319302 369301
12574 rows affected
Current block: 369302 419301
14286 rows affected
Current block: 419302 469301
11827 rows affected
Current block: 469302 519301
14223 rows affected
Current block: 519302 569301
14286 rows affected
Current block: 569302 619301
14286 rows affected
Current block: 619302 669301
14286 rows affected
Current block: 669302 719301
14286 rows affected
Current block: 719302 769301
14286 rows affected
Current block: 769302 819301
14285 rows affected
Current block: 819302 869301
14285 rows affected
Current block: 869302 919301
14438 rows affected
Current block: 919302 969301
14697 rows affected
Current block: 969302 1019301
14285 rows affected
Current block: 1019302 1069301
14286 rows affected
Current block: 1069302 1119301
14286 rows affected
Current block: 1119302 1169301
14332 rows affected
Current block: 1169302 1219301
14468 rows affected
Current block: 1219302 1269301
14922 rows affected
Current block: 1269302 1319301
16162 rows affected
Current block: 1319302 1369301
16667 rows affected
Current block: 1369302 1419301
11585 rows affected
Current block: 1419302 1469301
16849 rows affected
Current block: 1469302 1519301
20000 rows affected
Current block: 1519302 1569301
20000 rows affected
Current block: 1569302 1619301
20060 rows affected
Current block: 1619302 1669301
20000 rows affected
Current block: 1669302 1719301
20000 rows affected
Current block: 1719302 1769301
20000 rows affected
Current block: 1769302 1819301
19998 rows affected
Current block: 1819302 1869301
20000 rows affected
Current block: 1869302 1919301
11270 rows affected
Current block: 1919302 1969301
20000 rows affected
Current block: 1969302 2019301
20000 rows affected
Current block: 2019302 2069301
20598 rows affected
Current block: 2069302 2119301
20000 rows affected
Current block: 2119302 2169301
20709 rows affected
Current block: 2169302 2219301
19640 rows affected
Current block: 2219302 2269301
1192 rows affected
Current block: 2269302 2319301
0 rows affected
Current block: 2319302 2369301
0 rows affected
Current block: 2369302 2419301
8744 rows affected
Current block: 2419302 2469301
21182 rows affected
Current block: 2469302 2519301
19568 rows affected
Current block: 2519302 2569301
19550 rows affected
Current block: 2569302 2619301
22960 rows affected
Current block: 2619302 2669301
2903 rows affected
Current block: 2669302 2719301
Please review the relationship(s) between the Sequence ID 'AI035998' and the
Molecular Segment's Marker(s).  These relationships may no longer be
appropriate.
1 rows affected
TOTAL: 728276 foreign Accession IDs reassigned to clone
1> 
2> select "accum. time"=
3>        datediff ( ss, started, getdate() )
4>        from tempdb..startMigration
 accum. time
 -----------
        5587
1> 
2> drop table #fAccs
1> 
2> /* Could this leave any MGI:#'s still attached to ESTs? */
3> print ""
4> print "Accession IDs still associated with ESTs"
 
Accession IDs still associated with ESTs
1> select accID, _LogicalDB_key, preferred
2> from ACC_Accession a, PRB_Probe p
3> where a._MGIType_key = 3
4> and a._Object_key = p._Probe_key
5> and p.DNAType = "EST"
 accID                          _LogicalDB_key preferred
 ------------------------------ -------------- ---------
1> 
2> 
3> dump transaction mgd with no_log
1> 
2> set nocount off
1> 
2> print ""
3> print "Remove all Notes for ESTs"
 
Remove all Notes for ESTs
1> delete PRB_Notes 
2> from PRB_Notes n, PRB_Probe p
3> where n._Probe_key = p._Probe_key
4> and p.DNAType = "EST"
(8 rows affected)
1> 
2> dump transaction mgd with no_log
1> 
2> dump transaction tempdb with no_log
1> 
2> print ""
3> print "Migrate EST relationships"
 
Migrate EST relationships
1> 
2> /* determine which Encodes relationships need to be promoted/created */
3> select pm._Probe_key, pm._Marker_key, relationship, p.derivedFrom
4> into #estRel
5> from PRB_Marker pm, PRB_Probe p
6> where p.DNAType = "EST"
7> and pm._Probe_key = p._Probe_key
(765 rows affected)
1> 
2> print ""
3> print "Migrate Encodes relationships where clone has ANY other relationship"
 
Migrate Encodes relationships where clone has ANY other relationship
1> update PRB_Marker
2> set relationship = 'E'
3> from PRB_Marker pm, #estRel e
4> where pm._Probe_key = e.derivedFrom
5> and pm._Marker_key = e._Marker_key
6> and e.relationship = 'E'
7> and ( pm.relationship is NULL or pm.relationship != 'E' )
(0 rows affected)
1> 
2> print ""
3> print "Add Encodes relationships where clone has no relationship to the marker"
 
Add Encodes relationships where clone has no relationship to the marker
1> insert into PRB_Marker ( 
2>        _Probe_key, 
3>        _Marker_key, 
4>        relationship 
5> )
6> select derivedFrom, _Marker_key, relationship
7> from #estRel e
8> where relationship = 'E'
9> /* no existing relationship for the p-m pair */
10> and not exists ( select 1 
11>     from PRB_Marker cpm
12>     where cpm._Probe_key = e.derivedFrom
13>     and cpm._Marker_key = e._Marker_key
14> )
(95 rows affected)
1>     
2> /* clean up the handled Encodes */
3> delete from #estRel
4> where relationship = 'E' 
5> print ""
6> print "EST non-Encodes relationships that were not migrated to clone."
 
(765 rows affected)
EST non-Encodes relationships that were not migrated to clone.
1> 
2> select relationship, count(*)
3> from #estRel
4> group by relationship
 relationship            
 ------------ -----------

(0 rows affected)
1> 
2> drop table #estRel
3> dump transaction mgd with no_log
1> 
2> dump transaction tempdb with no_log
1> 
2> print ""
3> print "Count of WashU IMAGE clones"
4> select count(distinct derivedFrom)
5> from PRB_Probe
6> where DNAType = "EST"	/* all remaining are WashU ESTs */
7> 
8> print ""
9> print "Remove all ESTs"
 
Count of WashU IMAGE clones
            
 -----------
      349908
 

(1 row affected)
Remove all ESTs
1> select "accum. time"=
2>        datediff ( ss, started, getdate() )
3>        from tempdb..startMigration
 accum. time
 -----------
        5642

(1 row affected)
1> 
2> set nocount on
1> 
2> declare @minKey int, @maxKey int, @blockKey int, @total int,
3> @err int, @cnt int
4> select @minKey = min(_Probe_key),
5>        @maxKey = max(_Probe_key),
6> 		  @total = 0
7> from PRB_Probe
8> while @minKey <= @maxKey
9>   BEGIN
10>     select @blockKey = @minKey + 50000 - 1
11>     print  "Current block: %1! %2!", @minKey, @blockKey
12>     begin transaction
13>     delete from PRB_Probe
14>     where DNAType = "EST"
15>     and _Probe_key between @minKey and @blockKey
16> 
17> 	select @err=@@error, @cnt=@@rowcount
18> 	print "%1! rows affected", @cnt
19>     if ( @err != 0 )
20>       BEGIN
21>         rollback transaction
22>         return
23>       END
24>     else
25> 	  BEGIN
26> 	    select @total = @total + @cnt
27>         commit transaction
28> 	  END
29> 
30>     select @minKey = @blockKey + 1
31>     dump transaction mgd with no_log
32>   END
33> print "TOTAL: %1! EST records deleted", @total
Current block: 1 50000
0 rows affected
Current block: 50001 100000
15774 rows affected
Current block: 100001 150000
23740 rows affected
Current block: 150001 200000
25000 rows affected
Current block: 200001 250000
25000 rows affected
Current block: 250001 300000
25000 rows affected
Current block: 300001 350000
24999 rows affected
Current block: 350001 400000
23187 rows affected
Current block: 400001 450000
25000 rows affected
Current block: 450001 500000
25038 rows affected
Current block: 500001 550000
24999 rows affected
Current block: 550001 600000
21693 rows affected
Current block: 600001 650000
25374 rows affected
Current block: 650001 700000
25370 rows affected
Current block: 700001 750000
25671 rows affected
Current block: 750001 800000
28290 rows affected
Current block: 800001 850000
1 rows affected
TOTAL: 364136 EST records deleted
1> 
2> select "accum. time"=
3>        datediff ( ss, started, getdate() )
4>        from tempdb..startMigration
5> set nocount off
 accum. time
 -----------
        6165
1> 
2> 
3> /********************************************************************/
4> 
5> /* the following is for TR 611, a sub-project of 554/487.
6>    associate existing foreign accession IDs w/ internal WashU-dbEST 
7>    electronic load reference.
8> */
9> 
10> 
11> select _Accession_key
12> into #accrefs
13> from ACC_Accession
14> where 1=2
15> 
16> select _Object_key, rowID = 0
17> into #clonelist
18> from ACC_Accession
19> where 1 = 2
20> 
21> set nocount off
(0 rows affected)
(0 rows affected)
1> 
2> declare @ref int
3> select @ref = _Object_key from ACC_Accession
4> where accID = "J:57656"
5> 
6> if ( @ref is null )
7> BEGIN
8>  print ""
9>  print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
10>  print "!   Cannot locate a reference for WashU/dbEST electronic loads.   !"
11>  print "!   ACC_AccessionReference and PRB_Reference records NOT created! !"
12>  print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
13>  print ""
14> END
15> 
16> else
17> BEGIN
18>   print "Adding Accession-References for EST foreign accession IDs..."
19>   select "accum. time"=
20>        datediff ( ss, started, getdate() )
21>        from tempdb..startMigration
22> 
23>   /* get the _Object_keys for WashU's IMAGE clones */
24>   /* note: we use WashU tags to insure we get only EST-loaded IMAGE clones */
25>   insert into #clonelist
26>   select distinct _Object_key, 0
27>   from ACC_Accession a, PRB_Probe p
28>   where _LogicalDB_key = 16
29>   and _MGIType_key = 3
30>   and _Object_key = _Probe_key
31>   and p.name = 'I.M.A.G.E. clone'
32> 
33>   /* get all the _Accession_key - _Object_key tuples for these clones */
34>   insert into #accrefs 
35>   select _Accession_key
36>   from ACC_Accession a, #clonelist p
37>   where _MGIType_key = 3                     /* Segment */
38>   and a._Object_key = p._Object_key
39>   and _LogicalDB_key in (9, 12, 16, 17)
40> 
41>   dump transaction tempdb with no_log
42> 
43> END
(1 row affected)
Adding Accession-References for EST foreign accession IDs...
 accum. time
 -----------
        6165

(1 row affected)

(349908 rows affected)

(1384192 rows affected)
1> 
2> create unique index accrefs_index   on #accrefs (_Accession_key)
3> create unique index clonelist_index on #clonelist (_Object_key) 
1> 
2> /* there are some curator added GenBank IDs that should not be protected */
3> print ""
4> print "Remove GenBank Accession IDs that were added later by editors:"
5> 
6> /* these ESTs' clones have multiple GenBank IDs
7>    the min(_Accession_key) will be the original dbEST/WashU-loaded 
8>    GenBank ID:
9> */
10> 
11> print "Get list of Editor-Added GenBank SIDs..."
12> select _Accession_key, clone=derivedFrom, gbSID = accID
13> into #edAdded
14> from #extraSIDs e, ACC_Accession a
15> where a._MGIType_key = 3
16> and a._LogicalDB_key = 9
17> and a._Object_key = e.derivedFrom  /* the clones not the ESTs */
18> and a._Accession_key != e.washUsid
 
Remove GenBank Accession IDs that were added later by editors:
Get list of Editor-Added GenBank SIDs...
(4 rows affected)
1> 
2> /* report which ones are not being locked */
3> print "Following Clones' GenBank IDs appear to be added by curation and"
4> print "will NOT be protected by the dbEST Database Download reference:"
5> select "Clone MGI ID"=a.accID, gbSID
6> from #edAdded e, ACC_Accession a
7> where e.clone = a._Object_key
8> and a._MGIType_key = 3
9> and a.prefixPart = "MGI:"
10> and a.preferred = 0
11> order by clone, a.accID
Following Clones' GenBank IDs appear to be added by curation and
will NOT be protected by the dbEST Database Download reference:
 Clone MGI ID                   gbSID                         
 ------------------------------ ------------------------------
 MGI:759655                     AF012811                      
 MGI:760606                     AF065395                      
 MGI:775423                     AF047827                      
 MGI:1146834                    AF088902                      

(4 rows affected)
1> 
2> 
3> /* remove the ed-Added GenBank IDs from the list of accRefs to be generated */
4> print "Remove editor curated GenBank accession IDs from AccessionReference."
5> delete #accrefs
6> from #accrefs ar, #edAdded ed
7> where ed._Accession_key = ar._Accession_key
8> print ""
Remove editor curated GenBank accession IDs from AccessionReference.
 
(4 rows affected)
1> 
2> drop table #edAdded
1> 
2> set nocount on
1> 
2> /* now generate acc-refs for these */
3> 
4> declare @ref int, @total int, @err int, @cnt int
5> select @total = 0, @ref = _Object_key 
6> from ACC_Accession
7> where accID = "J:57656"
8> 
9> if @ref is not null
10> BEGIN
11>   declare @minKey int, @maxKey int, @blockKey int
12>   select @minKey = min(_Accession_key),
13>          @maxKey = max(_Accession_key)
14>   from #accrefs
15> 
16>   while @minKey <= @maxKey
17>   BEGIN
18>     select @blockKey = @minKey + 50000 - 1
19>     print  "Current block: %1! %2!", @minKey, @blockKey
20>     begin transaction
21> 
22> 	insert into ACC_AccessionReference (_Accession_key, _Refs_key)
23> 	select _Accession_key, @ref
24> 	from #accrefs
25> 	where _Accession_key between @minKey and @blockKey
26> 
27> 	select @err=@@error, @cnt=@@rowcount
28> 	print "%1! rows affected", @cnt
29>     if ( @err != 0 )
30>       BEGIN
31>         rollback transaction
32>         return
33>       END
34>     else
35> 	  BEGIN
36> 		select @total = @total + @cnt
37>         commit transaction
38> 	  END
39> 
40>     select @minKey = @blockKey + 1
41>     dump transaction mgd with no_log
42>   END
43> END
44> print "TOTAL: %1! AccessionReferences added.", @total
Current block: 269299 319298
20027 rows affected
Current block: 319299 369298
25147 rows affected
Current block: 369299 419298
28572 rows affected
Current block: 419299 469298
23655 rows affected
Current block: 469299 519298
28447 rows affected
Current block: 519299 569298
28572 rows affected
Current block: 569299 619298
28572 rows affected
Current block: 619299 669298
28571 rows affected
Current block: 669299 719298
28571 rows affected
Current block: 719299 769298
28572 rows affected
Current block: 769299 819298
28571 rows affected
Current block: 819299 869298
28571 rows affected
Current block: 869299 919298
28346 rows affected
Current block: 919299 969298
27953 rows affected
Current block: 969299 1019298
28571 rows affected
Current block: 1019299 1069298
28572 rows affected
Current block: 1069299 1119298
28572 rows affected
Current block: 1119299 1169298
28502 rows affected
Current block: 1169299 1219298
28291 rows affected
Current block: 1219299 1269298
27617 rows affected
Current block: 1269299 1319298
25757 rows affected
Current block: 1319299 1369298
24999 rows affected
Current block: 1369299 1419298
17379 rows affected
Current block: 1419299 1469298
25272 rows affected
Current block: 1469299 1519298
30000 rows affected
Current block: 1519299 1569298
30000 rows affected
Current block: 1569299 1619298
30015 rows affected
Current block: 1619299 1669298
30000 rows affected
Current block: 1669299 1719298
30000 rows affected
Current block: 1719299 1769298
30000 rows affected
Current block: 1769299 1819298
29998 rows affected
Current block: 1819299 1869298
30000 rows affected
Current block: 1869299 1919298
16922 rows affected
Current block: 1919299 1969298
30000 rows affected
Current block: 1969299 2019298
30000 rows affected
Current block: 2019299 2069298
30150 rows affected
Current block: 2069299 2119298
30000 rows affected
Current block: 2119299 2169298
30177 rows affected
Current block: 2169299 2219298
28786 rows affected
Current block: 2219299 2269298
48094 rows affected
Current block: 2269299 2319298
50000 rows affected
Current block: 2319299 2369298
50000 rows affected
Current block: 2369299 2419298
36271 rows affected
Current block: 2419299 2469298
30112 rows affected
Current block: 2469299 2519298
28680 rows affected
Current block: 2519299 2569298
27963 rows affected
Current block: 2569299 2619298
28422 rows affected
Current block: 2619299 2669298
2914 rows affected
Current block: 2669299 2719298
5 rows affected
TOTAL: 1384188 AccessionReferences added.
1> 
2> select "accum. time"=
3>    datediff ( ss, started, getdate() )
4>    from tempdb..startMigration
 accum. time
 -----------
        8022
1> 
2> drop table #accrefs
1> 
2> /* prepare #clonelist for PRB_Reference records */
3> 
4> declare cloneref cursor
5> for select rowID from #clonelist
6> for update of rowID
1> 
2> open cloneref
1> 
2> declare @row int, @rowID int
3> select @row = max (_Reference_key) from PRB_Reference
4> fetch cloneref into @rowID
5> while ( @@sqlstatus = 0 )
6>   BEGIN
7>     select @row = @row + 1
8>     update #clonelist set rowID = @row
9> 	where current of cloneref
10> 	fetch cloneref into @rowID
11>   END
1> 
2> close cloneref
1> 
2> deallocate cursor cloneref
1> 
2> declare @ref int, @total int, @err int, @cnt int
3> select @total = 0, @ref = _Object_key 
4> from ACC_Accession
5> where accID = "J:57656"
6> 
7> if @ref is not null
8> BEGIN
9>   declare @minKey int, @maxKey int, @blockKey int
10>   select @minKey = min(_Object_key),
11>          @maxKey = max(_Object_key)
12>   from #clonelist
13> 
14>   while @minKey <= @maxKey
15>   BEGIN
16>     select @blockKey = @minKey + 50000 - 1
17>     print  "Current block: %1! %2!", @minKey, @blockKey
18>     begin transaction
19> 
20> 	insert into PRB_Reference (
21> 		_Reference_key,
22>         _Probe_key,
23>         _Refs_key,
24>         holder,
25>         hasRmap,
26>         hasSequence
27>         )
28>     select rowID, 
29>         _Object_key,
30>         @ref,
31>         NULL,
32>         0,
33>         0
34>     from #clonelist
35> 	where _Object_key between @minKey and @blockKey
36> 
37> 	select @err = @@error, @cnt = @@rowcount
38> 	print "%1! rows affected", @cnt
39>     if ( @err != 0 )
40>       BEGIN
41>         rollback transaction
42>         return
43>       END
44>     else
45> 	  BEGIN
46> 	    select @total = @total + @cnt
47>         commit transaction
48> 	  END
49> 
50>     select @minKey = @blockKey + 1
51>     dump transaction mgd with no_log
52>   END
53> END
54> print "TOTAL: %1! PRB_Reference records added.", @total
Current block: 62478 112477
20784 rows affected
Current block: 112478 162477
24969 rows affected
Current block: 162478 212477
25000 rows affected
Current block: 212478 262477
25000 rows affected
Current block: 262478 312477
25000 rows affected
Current block: 312478 362477
24999 rows affected
Current block: 362478 412477
23187 rows affected
Current block: 412478 462477
24962 rows affected
Current block: 462478 512477
25000 rows affected
Current block: 512478 562477
25000 rows affected
Current block: 562478 612477
21693 rows affected
Current block: 612478 662477
24626 rows affected
Current block: 662478 712477
23957 rows affected
Current block: 712478 762477
22782 rows affected
Current block: 762478 812477
12949 rows affected
TOTAL: 349908 PRB_Reference records added.
1> 
2> select "accum. time"=
3>     datediff ( ss, started, getdate() )
4>     from tempdb..startMigration
5> set nocount off
 accum. time
 -----------
       11198
1> 
2> drop table #clonelist
1> 
2> 
3> /***********************************************************************/
4> 
5> /* Lori plans to create these records in production so the EI can 
6>    use the record keys; the checks for prior existence should prevent
7>    the records from being added where they already exist (UNLESS the
8>    name does not include "UniGene".
9> */
10> 
11> LogicalActual:
12> 
13> /* add needed UniGene Logical/Actual DB records if not present */
14> print "Checking UniGene Logical and Actual DB"
Checking UniGene Logical and Actual DB
1> 
2> declare @ldbkey int
3> select @ldbkey = _LogicalDB_key from ACC_LogicalDB where name like '%UniGene%'
4> if ( @ldbkey is null )
5>   BEGIN
6>     print "Adding UniGene Logical DB."
7>     select @ldbkey=max(_LogicalDB_key)+1 from ACC_LogicalDB
8>     insert into ACC_LogicalDB ( 
9>         _LogicalDB_key, 
10>         name,
11>         description, 
12>         _Species_key
13>         ) 
14>     values ( 
15>         @ldbkey, 
16>         "UniGene",
17>         "UniGene Mus musculus clustering resource",
18>         1
19>         )
20>   END
21> else
22>   print "UniGene Logical DB record already exists"
23> 
24> if not exists (select 1 from ACC_ActualDB where name like '%UniGene%')
25>   BEGIN
26>     print "Adding UniGene Actual DB."
27>     declare @adbkey int
28>     select @adbkey=max(_LogicalDB_key)+1 from ACC_ActualDB
29>     insert into ACC_ActualDB ( 
30>          _ActualDB_key, 
31>          _LogicalDB_key,
32>          name, 
33>          active,
34>          allowsMultiple,
35>          url 
36>          )
37>     values ( 
38>          @adbkey, 
39>          @ldbkey,
40>          "UniGene", 
41>          1,
42>          0,
43>          "http://www.ncbi.nlm.nih.gov/UniGene/clust.cgi?ORG=Mm&CID=@@@@"
44>          )
45>   END
46> else
47>   print "UniGene Actual DB record already exists"
(1 row affected)
UniGene Logical DB record already exists
UniGene Actual DB record already exists
(0 rows affected)
1> 
2> print ""
3> print "REMINDER: update WI's ActualDB file for UniGene entry!!"
4> print ""
 
REMINDER: update WI's ActualDB file for UniGene entry!!
 
1> 
2> drop table tempdb..startMigration
1> 
2> /* 
3> set noexec off
4> set parseonly off
5> */
